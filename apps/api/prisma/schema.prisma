// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  id        String    @id @db.VarChar(100)
  firstName String    @db.VarChar(50)
  lastName  String    @db.VarChar(50)
  email     String    @unique @db.VarChar(100)
  password  String    @db.VarChar(100)
  referral  String    @db.VarChar(50)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  roleId    Int
  role      Role      @relation(fields: [roleId], references: [id])
  vouchers  Voucher[]
  events    Event[]

  @@map("users")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(20)
  users User[]

  @@map("roles")
}

model Voucher {
  id        String   @id @db.VarChar(100)
  name      String   @db.VarChar(50)
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.VarChar(100)
  user      User     @relation(fields: [userId], references: [id])

  @@map("vouchers")
}

model Event {
  id                String   @id @db.VarChar(100)
  eventName         String   @db.Text
  eventDesc         String   @db.Text
  eventStart        DateTime
  eventLastRegister DateTime
  eventAttendee     Int
  userId            String   @db.VarChar(100)
  user              User     @relation(fields: [userId], references: [id])

  @@map("events")
}

model Authentication {
  id    Int    @id @default(autoincrement())
  token String @db.Text

  @@map("authentications")
}
